
import streamlit as st
import pandas as pd
import math

st.set_page_config(page_title="Calculadora Pladur", layout="wide")
st.title("üßÆ Calculadora de Or√ßamentos ‚Äî Pladur (Teto)")

# =========================
# PAR√ÇMETROS GLOBAIS
# =========================
st.sidebar.header("Par√¢metros Globais (pre√ßos)")
preco_placa = st.sidebar.number_input("Placa (‚Ç¨/unid ‚Äî 2,00m √ó 1,20m)", value=20.0, min_value=0.0, step=0.5)
preco_calha_ml = st.sidebar.number_input("Calha perimetral (‚Ç¨/metro)", value=3.0, min_value=0.0, step=0.1)
preco_perfil_un = st.sidebar.number_input("Perfil/Montante (‚Ç¨/unid de 3,00m)", value=4.0, min_value=0.0, step=0.1)
preco_varao_un = st.sidebar.number_input("Var√£o roscado (‚Ç¨/unid)", value=1.2, min_value=0.0, step=0.1)
preco_pivot_un = st.sidebar.number_input("Pivot/Suspens√£o (‚Ç¨/unid)", value=0.6, min_value=0.0, step=0.1)

st.sidebar.header("Custos e Margem")
custo_mao_obra_m2 = st.sidebar.number_input("M√£o de obra (‚Ç¨/m¬≤)", value=15.0, min_value=0.0, step=0.5)
margem = st.sidebar.number_input("Margem de lucro (%)", value=20.0, min_value=0.0, step=1.0)

st.sidebar.header("Regras de Montagem")
espacamento_perfis_m = st.sidebar.number_input("Espa√ßamento entre perfis (m)", value=0.60, min_value=0.10, step=0.05, format="%.2f")
espacamento_varoes_m = st.sidebar.number_input("Espa√ßamento dos var√µes (m)", value=0.60, min_value=0.10, step=0.05, format="%.2f")

# =========================
# ENTRADA DE DIVIS√ïES
# =========================
st.header("Adicionar Divis√£o")
with st.form("form_divisao"):
    nome = st.text_input("Nome da divis√£o", "Divis√£o 1")
    largura = st.number_input("Largura (m)", min_value=0.1, value=5.0, step=0.1, format="%.2f")
    comprimento = st.number_input("Comprimento (m)", min_value=0.1, value=4.0, step=0.1, format="%.2f")
    adicionar = st.form_submit_button("‚ûï Adicionar divis√£o")

if "divisoes" not in st.session_state:
    st.session_state.divisoes = []

if adicionar:
    st.session_state.divisoes.append({"Nome": nome, "Largura": largura, "Comprimento": comprimento})
    st.success(f"Adicionada: {nome} ({largura:.2f} m √ó {comprimento:.2f} m)")

# =========================
# PROCESSAMENTO
# =========================
def calcula_divisao(l, c):
    """Devolve um dicion√°rio com c√°lculos da divis√£o."""
    area = l * c
    n_placas = math.ceil(area / 2.4)  # 2.00 x 1.20 = 2.40 m¬≤ por placa

    # Calha perimetral em metros lineares
    perimetro = 2 * (l + c)

    # Perfis em unidades de 3 m:
    n_linhas = math.ceil(l / espacamento_perfis_m) + 1
    ml_perfis = n_linhas * c
    un_perfis = math.ceil(ml_perfis / 3.0)

    # Var√µes roscados em grelha
    nx = math.ceil(l / espacamento_varoes_m)
    ny = math.ceil(c / espacamento_varoes_m)
    n_varoes = nx * ny

    # Pivots: 1 por cada var√£o
    n_pivots = n_varoes

    # Custos materiais
    custo_material = (
        n_placas * preco_placa +
        perimetro * preco_calha_ml +
        un_perfis * preco_perfil_un +
        n_varoes * preco_varao_un +
        n_pivots * preco_pivot_un
    )

    return {
        "√Årea (m¬≤)": area,
        "Placas (un)": n_placas,
        "Calha (m)": perimetro,
        "Perfis 3m (un)": un_perfis,
        "Var√µes (un)": n_varoes,
        "Pivots (un)": n_pivots,
        "Custo Materiais (‚Ç¨)": custo_material
    }

if st.session_state.divisoes:
    st.subheader("Divis√µes")
    linhas = []
    for d in st.session_state.divisoes:
        res = calcula_divisao(d["Largura"], d["Comprimento"])
        linhas.append({**d, **res})
    df = pd.DataFrame(linhas)
    st.dataframe(df, use_container_width=True)

    # Totais
    total_area = df["√Årea (m¬≤)"].sum()
    total_placas = int(df["Placas (un)"].sum())
    total_calha = df["Calha (m)"].sum()
    total_perfis_un = int(df["Perfis 3m (un)"].sum())
    total_varoes = int(df["Var√µes (un)"].sum())
    total_pivots = int(df["Pivots (un)"].sum())
    total_materiais = df["Custo Materiais (‚Ç¨)"].sum()

    custo_mao_obra = total_area * custo_mao_obra_m2
    subtotal = total_materiais + custo_mao_obra
    valor_margem = subtotal * (margem / 100.0)
    preco_final = subtotal + valor_margem

    st.markdown("---")
    st.subheader("Totais Gerais")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("√Årea total (m¬≤)", f"{total_area:.2f}")
        st.metric("Placas (un)", f"{total_placas}")
        st.metric("Calha (m)", f"{total_calha:.2f}")
    with col2:
        st.metric("Perfis 3m (un)", f"{total_perfis_un}")
        st.metric("Var√µes (un)", f"{total_varoes}")
        st.metric("Pivots (un)", f"{total_pivots}")
    with col3:
        st.metric("Materiais (‚Ç¨)", f"{total_materiais:.2f}")
        st.metric("M√£o de obra (‚Ç¨)", f"{custo_mao_obra:.2f}")
        st.metric("Subtotal (‚Ç¨)", f"{subtotal:.2f}")

    st.markdown(f"### Margem (‚Ç¨): **{valor_margem:.2f}**")
    st.markdown(f"## üí∞ Pre√ßo Final Cliente (‚Ç¨): **{preco_final:.2f}**")

    # Exporta√ß√£o CSV simples
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Exportar divis√µes (CSV)", data=csv, file_name="orcamento_pladur_divisoes.csv", mime="text/csv")

# Limpar divis√µes
with st.expander("Op√ß√µes"):
    if st.button("üóëÔ∏è Limpar todas as divis√µes"):
        st.session_state.divisoes = []
        st.experimental_rerun()
